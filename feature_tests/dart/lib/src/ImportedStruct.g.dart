// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _ImportedStructFfi extends ffi.Struct {
  @ffi.Int32()
  external int foo;
  @ffi.Uint8()
  external int count;
}

final class ImportedStruct {
  UnimportedEnum _foo;
  int _count;

  ImportedStruct._(this._foo,this._count,);


  factory ImportedStruct._fromFfi(_ImportedStructFfi ffi){

    var _underlying = ffi;
    var _foo = UnimportedEnum.values[_underlying.foo];
    var _count = _underlying.count;
    return ImportedStruct._(_foo, _count, );
  }

  _ImportedStructFfi _toFfi() {
    final pointer = ffi2.calloc<_ImportedStructFfi>();
    var _underlying = pointer.ref;
    _underlying.foo = foo.index;;
    _underlying.count = count;;

    _callocFree.attach(_underlying, pointer.cast());
    return _underlying;
  }

  UnimportedEnum get foo => this._foo;
  set foo(UnimportedEnum foo) {
    _foo = foo;
  }

  int get count => this._count;
  set count(int count) {
    _count = count;
  }

  @override
  bool operator ==(Object other) =>
      other is ImportedStruct &&
      other.foo == this.foo &&
      other.count == this.count;

  @override
  int get hashCode => Object.hashAll([
        this.foo,
        this.count,
      ]);
}
