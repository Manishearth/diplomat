final class _{{type_name}}Ffi extends ffi.Struct {
  {%- for field in fields %}
  {%- match field.annotation %}
  {%- when Some with (annotation) %}
  @{{annotation}}()
  {%- when None %}
  {%- endmatch %}
  external {{field.ffi_cast_type_name}} {{field.name}};
  {%- endfor %}
}

{% if !docs.is_empty() -%}
/// {{docs}}
{% endif -%}
final class {{type_name}} {

  {%- for field in fields %}
  {% if !mutable -%} final {% endif -%} {{field.dart_type_name}} _{{field.name}};
  {%- endfor %}

  {{type_name}}._({%- for field in fields %}this._{{field.name}}, {%- endfor -%});


  factory {{type_name}}._fromFfi(_{{type_name}}Ffi ffi){

    var _underlying = ffi;
    {%- for field in fields %}
    var _{{field.name}} = {{field.get_expression}};
    {%- endfor %}
    return {{type_name}}._({%- for field in fields %}_{{field.name}}, {% endfor -%});
  }

  _{{type_name}}Ffi _toFfi() {
    final pointer = ffi2.calloc<_{{type_name}}Ffi>();
    var _underlying = pointer.ref;
    {%- for field in fields %}
    {%- for set_expression in field.set_expressions %}
    {{set_expression}};
    {%- endfor %}
    {%- endfor %}

    // This isn't allowed since _underlying is a value type
    // We will need to instead return a pointer and free on the other side,
    // which will be less elegant
    _callocFree.attach(_underlying, pointer.cast());
    return _underlying;
  }


  {%- for field in fields %}

  {{field.dart_type_name}} get {{field.name}} => this._{{field.name}};

  {%- if mutable %}
  set {{field.name}}({{field.dart_type_name}} {{field.name}}) {
    _{{field.name}} = {{field.name}};
  }
  {%- endif %}
  {%- endfor %}

  {%- for m in methods %}
{% include "method.dart.jinja" %}
  {%- endfor %}

  @override
  bool operator ==(Object other) =>
      other is {{type_name}}
      {%- for field in fields %} &&
      other.{{field.name}} == this.{{field.name}}
      {%- endfor %};

  @override
  int get hashCode => Object.hashAll([
      {%- for field in fields %}
        this.{{field.name}},
      {%- endfor %}
      ]);
}

{%- for m in methods %}

{% include "native_method.dart.jinja" %}
{%- endfor %}
